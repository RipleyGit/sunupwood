/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.chainof.sunup.controller;

import cn.chainof.sunup.controller.api.ProductDesignApi;
import cn.chainof.sunup.controller.dto.data.ProductDesignDTO;
import cn.chainof.sunup.controller.dto.data.ProductDesignItemDTO;
import cn.chainof.sunup.exception.ClientException;
import cn.chainof.sunup.service.ProductDesignService;
import com.github.pagehelper.util.StringUtil;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Slf4j
@RestController
public class ProductDesignApiController implements ProductDesignApi {


    @Autowired
    private ProductDesignService productDesignService;

    @Override
    public ResponseEntity<Void> addProductDesign(@ApiParam(value = "产品设计内容", required = true) @Valid @RequestBody ProductDesignDTO productDto) {
        if (StringUtil.isEmpty(productDto.getLordImg()) || StringUtil.isEmpty(productDto.getName())) {
            throw new ClientException("主图和名称不能为空");
        }
        if (StringUtil.isEmpty(productDto.getItemId())){
            throw new ClientException("产品设计分类不能为空");
        }
        productDesignService.addProductDesign(productDto);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> addProductDesignItem(@ApiParam(value = "产品设计分类", required = true) @Valid @RequestBody ProductDesignItemDTO productItemDto) {
        if (StringUtil.isEmpty(productItemDto.getLordImg()) || StringUtil.isEmpty(productItemDto.getName())) {
            throw new ClientException("主图和名称不能为空");
        }
        productDesignService.addProductDesignItem(productItemDto);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }


    @Override
    public ResponseEntity<ProductDesignDTO> getProductDesignDTOInfo(@NotNull @ApiParam(value = "唯一ID", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        ProductDesignDTO dto = productDesignService.getProductDesignDTOInfo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dto, headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<ProductDesignItemDTO> getProductDesignItemDTOInfo(@NotNull @ApiParam(value = "唯一ID", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        ProductDesignItemDTO dto = productDesignService.getProductDesignItemDTOInfo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dto, headers, HttpStatus.OK);
    }


    @Override
    public ResponseEntity<List<ProductDesignDTO>> queryProductList(@ApiParam(value = "当前页数", defaultValue = "0") @Valid @RequestParam(value = "pageIndex", required = false, defaultValue = "0") Integer pageIndex, @ApiParam(value = "页面大小", defaultValue = "5") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "5") Integer pageSize) {
        List<ProductDesignDTO> dtoList = productDesignService.queryProductList(pageIndex, pageSize);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dtoList, headers, HttpStatus.OK);
    }


    @Override
    public ResponseEntity<Void> updateProductDesign(@ApiParam(value = "产品设计内容", required = true) @Valid @RequestBody ProductDesignDTO designDto) {
        if (StringUtil.isEmpty(designDto.getLordImg()) || StringUtil.isEmpty(designDto.getName())) {
            throw new ClientException("主图和名称不能为空");
        }
        if (StringUtil.isEmpty(designDto.getId())) {
            throw new ClientException("修改时ID不能为空");
        }
        if (StringUtil.isEmpty(designDto.getItemId())){
            throw new ClientException("产品设计分类不能为空");
        }
        productDesignService.updateProductDesign(designDto);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> updateProductDesignItem(@ApiParam(value = "产品分类的内容" ,required=true )  @Valid @RequestBody ProductDesignItemDTO designDto) {
        if (StringUtil.isEmpty(designDto.getLordImg()) || StringUtil.isEmpty(designDto.getName())) {
            throw new ClientException("主图和名称不能为空");
        }
        if (StringUtil.isEmpty(designDto.getId())) {
            throw new ClientException("修改时ID不能为空");
        }
        productDesignService.updateProductDesignItem(designDto);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> deleteById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        productDesignService.deleteById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> deleteItemById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        productDesignService.deleteById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);    }

    @Override
    public ResponseEntity<List<ProductDesignItemDTO>> queryProductItemList(@ApiParam(value = "当前页数", defaultValue = "0") @Valid @RequestParam(value = "pageIndex", required = false, defaultValue = "0") Integer pageIndex, @ApiParam(value = "页面大小", defaultValue = "2") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "2") Integer pageSize){
        List<ProductDesignItemDTO> dtoList = productDesignService.queryProductItemList(pageIndex,pageSize);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dtoList,headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<List<ProductDesignDTO>> queryProductListByItem(@ApiParam(value = "",required=true) @PathVariable("itemId") String itemId,@ApiParam(value = "当前页数", defaultValue = "0") @Valid @RequestParam(value = "pageIndex", required = false, defaultValue="0") Integer pageIndex,@ApiParam(value = "页面大小", defaultValue = "9") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="9") Integer pageSize){
        List<ProductDesignDTO> dtoList = productDesignService.queryProductListByItem(itemId,pageIndex, pageSize);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dtoList, headers, HttpStatus.OK);
    }



}
