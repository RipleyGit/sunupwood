/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.chainof.sunup.controller;

import cn.chainof.sunup.controller.api.ProjectDesignerApi;
import cn.chainof.sunup.controller.dto.data.DesignerDTO;
import cn.chainof.sunup.exception.ClientException;
import cn.chainof.sunup.model.ProjectDesigner;
import cn.chainof.sunup.service.ProjectDesignerService;
import cn.chainof.sunup.utils.AutoConvertUtil;
import cn.chainof.sunup.utils.DateUtil;
import com.alibaba.fastjson.JSON;
import com.github.pagehelper.util.StringUtil;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Slf4j
@RestController
public class ProjectDesignerApiController implements ProjectDesignerApi {

    @Autowired
    private ProjectDesignerService projectDesignerService;

    @Override
    public ResponseEntity<Void> addDesigner(@ApiParam(value = "", required = true) @Valid @RequestBody DesignerDTO designerDto){

        if (StringUtil.isEmpty(designerDto.getName())){
            log.error("设计师名称不能为空");
            throw new ClientException("设计师名称不能为空");
        }
        ProjectDesigner newDesigner = AutoConvertUtil.autoConvertTo(designerDto, ProjectDesigner.class);
        newDesigner.setSamplereels(JSON.toJSONString(designerDto.getImgReels()));
        projectDesignerService.addDesigner(newDesigner);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> deleteById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id){
        projectDesignerService.deletedById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<DesignerDTO> getDesignerInfo(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id){
        ProjectDesigner designer = projectDesignerService.getDesignerById(id);
        DesignerDTO dto = AutoConvertUtil.autoConvertTo(designer, DesignerDTO.class);
        dto.setImgReels(JSON.parseArray(designer.getSamplereels(),String.class));
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dto,headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<List<DesignerDTO>> getDesignerList(@ApiParam(value = "") @Valid @RequestParam(value = "key", required = false) String key, @ApiParam(value = "当前页数", defaultValue = "0") @Valid @RequestParam(value = "pageIndex", required = false, defaultValue = "0") Integer pageIndex, @ApiParam(value = "页面大小", defaultValue = "3") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize){
        List<ProjectDesigner> list = projectDesignerService.queryList(key,pageIndex,pageSize);
        List<DesignerDTO> dtoList = AutoConvertUtil.convert2List(list, DesignerDTO.class);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(dtoList,headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<List<String>> getReelsById(@NotNull @ApiParam(value = "设计师ID", required = true) @Valid @RequestParam(value = "id", required = true) String id){
        ProjectDesigner designer = projectDesignerService.getDesignerById(id);
        List<String> list = JSON.parseArray(designer.getSamplereels(), String.class);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(list,headers, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> modifyDesignerInfo(@ApiParam(value = "", required = true) @Valid @RequestBody DesignerDTO designerDto){
        if (StringUtil.isEmpty(designerDto.getId())){
            log.error("修改ID不能为空");
            throw new ClientException("修改ID不能为空");
        }
        if (StringUtil.isEmpty(designerDto.getName())){
            log.error("设计师名称不能为空");
            throw new ClientException("设计师名称不能为空");
        }
        ProjectDesigner designer = projectDesignerService.getDesignerByName(designerDto.getName());
        if (designer != null){
            log.error("已存在该设计师");
            throw new ClientException("已存在该设计师");
        }

        ProjectDesigner updateDesigner = AutoConvertUtil.autoConvertTo(designerDto, ProjectDesigner.class);
        projectDesignerService.updateDesigner(updateDesigner);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        return new ResponseEntity<>(headers, HttpStatus.OK);
    }
}
