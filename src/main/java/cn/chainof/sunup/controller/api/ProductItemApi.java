/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.chainof.sunup.controller.api;

import cn.chainof.sunup.controller.dto.data.ItemDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "ProductItem", description = "the ProductItem API")
public interface ProductItemApi {

    @ApiOperation(value = "增加分类", nickname = "addItem", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "新增成功") })
    @RequestMapping(value = "/project/product/item",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addItem(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ItemDTO item);


    @ApiOperation(value = "删除分类", nickname = "deletedItem", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "删除成功") })
    @RequestMapping(value = "/project/product/item",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletedItem(@NotNull @ApiParam(value = "分类ID", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "查看分类内容", nickname = "getItem", notes = "", response = ItemDTO.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "分类内容", response = ItemDTO.class) })
    @RequestMapping(value = "/project/product/item",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ItemDTO> getItem(@NotNull @ApiParam(value = "分类详情", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "查看分类列表", nickname = "getItems", notes = "", response = ItemDTO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "分类列表", response = ItemDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/project/product/itemList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ItemDTO>> getItems(@ApiParam(value = "分类关键字，分类名，描述，模糊查询") @Valid @RequestParam(value = "key", required = false) String key);


    @ApiOperation(value = "根据上级分类获取下级分类列表", nickname = "getItemsByParentId", notes = "", response = ItemDTO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "获取分类列表", response = ItemDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/project/product/getItemsByParentId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ItemDTO>> getItemsByParentId(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "parentId", required = true) String parentId);


    @ApiOperation(value = "获取根级分类", nickname = "getRootItems", notes = "", response = ItemDTO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "获取主分类列表", response = ItemDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/project/product/getRootItems",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ItemDTO>> getRootItems();


    @ApiOperation(value = "修改分类", nickname = "modifyItem", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProductItem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "修改成功") })
    @RequestMapping(value = "/project/product/item",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifyItem(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ItemDTO item);

}
