/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cn.chainof.sunup.controller.api;

import cn.chainof.sunup.controller.dto.data.DesignerDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "ProjectDesigner", description = "the ProjectDesigner API")
public interface ProjectDesignerApi {

    @ApiOperation(value = "添加设计师", nickname = "addDesigner", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "新增成功") })
    @RequestMapping(value = "/project/product/designer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addDesigner(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DesignerDTO designerDto);


    @ApiOperation(value = "删除设计师", nickname = "deleteById", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "删除成功") })
    @RequestMapping(value = "/project/product/designer",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "查看设计师详细信息", nickname = "getDesignerInfo", notes = "", response = DesignerDTO.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "设计师内容信息", response = DesignerDTO.class) })
    @RequestMapping(value = "/project/product/designer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DesignerDTO> getDesignerInfo(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "查看设计师列表", nickname = "getDesignerList", notes = "", response = DesignerDTO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "设计师列表", response = DesignerDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/project/product/designer/queryList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DesignerDTO>> getDesignerList(@ApiParam(value = "") @Valid @RequestParam(value = "key", required = false) String key,@ApiParam(value = "当前页数", defaultValue = "0") @Valid @RequestParam(value = "pageIndex", required = false, defaultValue="0") Integer pageIndex,@ApiParam(value = "页面大小", defaultValue = "3") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="3") Integer pageSize);


    @ApiOperation(value = "获取设计师作品列表", nickname = "getReelsById", notes = "", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "作品列表", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/project/product/designer/getReels",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getReelsById(@NotNull @ApiParam(value = "设计师ID", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "修改设计师信息", nickname = "modifyDesignerInfo", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "ProjectDesigner", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "修改成功") })
    @RequestMapping(value = "/project/product/designer",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifyDesignerInfo(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DesignerDTO designerDto);

}
